---
layout: default
title: XSL Transforms
---

h1 Writing the .xslt file

h2 XSL Transformations
p.
    ConfigZilla uses a technology called <a href="http://en.wikipedia.org/wiki/XSLT">XSL Transformations</a> to
    create the config files. For each part of the template that you want to
    transform you write a small file that inserts, deletes or changes nodes
    and attributes. ConfigZilla will merge all the .xslt files you write into
    one large file called ConfigZilla.xslt (which can be found in your output
    folder) and then apply it. This merging allows you to keep each individual
    .xslt file small and manageable.

p.
    The Transforms folder is recursively scanned for files matching the pattern
    *.czDefault.xslt. These files are always included in the merged ConfigZilla.xslt.
    Additionally, any files that match your current configuration, such as
    Foo.Debug.xslt (if you are in Debug mdoe) will also be included. This allows
    you to take special actions for particular configurations. However, the
    power of the ConfigZilla variable subsitution feature means that you will
    rarely need to do this.

h2 Learning by example
p.
    XSLT is a complicated and powerful technology which can perform any transformation
    you want. Luckily the set of transformations we typically need for config
    files is quite small and simple to understand. So let's take a look at a
    typical XSLT file. This is from the ConfigZilla samples and is used for
    setting the &lt;appSettings&gt; block.

pre
    code(class="xml").
        <?xml version="1.0" encoding="utf-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">

          <xsl:template match="/configuration/appSettings/add[@key='Setting1']|/appSettings/add[@key='Setting1']">
            <add key="Setting1" value="$(appSetting1)" />
          </xsl:template>

          <xsl:template match="/configuration/appSettings/add[@key='Setting2']|/appSettings/add[@key='Setting2']">
            <add key="Setting2" value="$(appSetting2)" />
          </xsl:template>

          <!-- Replace <AppSettingsBlock /> with the whole set -->
          <xsl:template match="AppSettingsBlock" xml:space="preserve">
            <appSettings>
              <add key="Setting1" value="$(appSetting1)" />
              <add key="Setting2" value="$(appSetting2)" />
            </appSettings>
          </xsl:template>

        </xsl:stylesheet>

p.
    The first two lines (down to and including the &lt;stylesheet&gt; tag) are
    just XML boilerplate and are in fact stripped by ConfigZilla when it merges
    the files. I tend to include them however, because otherwise the Visual
    Studio XML editor will complain about the syntax. The body of the file then
    consists of a series of
    <a href="http://msdn.microsoft.com/en-us/library/ms256110%28v=vs.110%29.aspx">&lt;xsl:template&gt;</a>
    declarations. Each template
    consists of 2 parts. The first part, the match="..." statement, is written
    in <a href="http://en.wikipedia.org/wiki/XPath">XPath</a> syntax, and specifies
    which elements in the source *.template.config document to apply
    your template to. The second part is the body of the template, this says what
    to do when the template matches. These examples are very simple, the template
    bodies just consist of XML to be output. The "$(appSetting1)" variable
    will be replaced with the appropriate value as determined by
    your <a href="targets.html">.targets</a> file.

p.
    Let's deconstruct the XPath in the first template. Firstly, note that there
    is a '|' in the middle. This is an "or" and separates two separates XPath
    expressions, meaning that the template will match either of them. So the
    two XPaths are

pre
    code(class="xml").
        /configuration/appSettings/add[@key='Setting1']

        or

        /appSettings/add[@key='Setting1']

p.
    "/" means "root of the document, so "/configuration" means look for
    a node called "configuration" directly under the root. Then we ask
    for an "appSettings" node under that, and then an "add" node under
    that. Not surprisingly, this matches the structure of the typical
    app.config file:

pre
    code(class="cs").
        <?xml version="1.0" encoding="utf-8" ?>
        <configuration>
          <configSections>
            <section name="reportingSettings" type="CZ.ReportingSettings, ConfigZilla" requirePermission="false" />
            <section name="PaymentSettings" type="CZ.PaymentSettings, ConfigZilla"/>
          </configSections>

          <appSettings>
            <add key="Setting1" value="" />
            <add key="Setting2" value="" />
          </appSettings>

        ...

p.
    The <strong>[@key='Setting'1]</strong> syntax is a further filter: it means
    "only match elements with an attribute called 'key' which has the value
    of 'Setting1'". In other words, this matches a <em>particular</em> appSetting/add
    element rather than them all.

p.
    The second XPath expression after the '|' matches exactly the same thing <em>but
    without the leading "configuration" node</em>. It becomes effective if
    you split your template files into <a href="templates.html">separate files</a>,
    because the sub-files don't have the &lt;configuration&gt; node, they just look like this:

pre
    code(class="xml").
        <appSettings>
          <add key="Setting1" value=""/>
          <add key="Setting2" value=""/>
        </appSettings>

p.
    You don't have to use the '|', but it's handy to have in case you decide
    to split or not-split at a later date. It would also be possible to use
    the XPath expression "//appSettings" which will find the appSettings
    node wherever it is in the document structure. You would only need one
    XPath expression if you used this, but I tend to avoid it because of the
    (rare) chance that I might add some XML in the future which matches the
    expression when I didn't want it to. It's also slow.

p.
    Both of the templates we have discussed so far are "node rewriting templates".
    They completely replace the XML they match with new XML. An alternative would
    be to just set the "value" attribute, but in fact this is a bit more verbose and
    the node-rewriting technique is often easier to grok.

p.
    The final template in the example takes this node-rewriting technique a
    step further. It replaces the tag &lt;AppSettingsBlock /&gt; with an entire
    &lt;appSettings&gt;...&lt;/appSettings&gt; section containing all settings.
    This is a great way of cutting your template files down to size. Plus,
    if you use this technique and want to add a new connection string to all
    your projects you only need to do it in the .xslt file.

h2 Setting attributes
p.
    The ReportingSettings in the samples uses this XML syntax in the config file:

pre
    code(class="xml").
        <reportingSettings PageSize="" Server="" RecipientEmail="" />

p.
    and this is the XSLT used to set the attribute values:

pre
    code(class="xml").
      <xsl:template match="/configuration/reportingSettings/@PageSize|/reportingSettings/@PageSize">
        <xsl:attribute name="PageSize">
          <xsl:value-of select="'$(rsPageSize)'"/>
        </xsl:attribute>
      </xsl:template>

      <xsl:template match="/configuration/reportingSettings/@Server|/reportingSettings/@Server">
        <xsl:attribute name="Server">
          <xsl:value-of select="'$(rsServer)'"/>
        </xsl:attribute>
      </xsl:template>

      <xsl:template match="/configuration/reportingSettings/@RecipientEmail|/reportingSettings/@RecipientEmail">
        <xsl:attribute name="RecipientEmail">
          <xsl:value-of select="'$(rsRecipientEmail)'"/>
        </xsl:attribute>
      </xsl:template>

p.
    "@PageSize" means match an attribute called PageSize. Then the body of the
    template is applied. This replaces the matched element of 'PageSize=""'
    with a new attribute called PageSize and the appropriate value.

p.
    Attribute-setting templates like this are most useful when you must
    change a specific attribute and leave the rest unchanged. Setting the
    "Debug" flag on the compilation node in a web app is a good example. We
    definitely don't want to change any other attributes that may be set:

pre
    code(class="xml").
        <xsl:template match="/configuration/system.web/compilation/@debug|/system.web/compilation/@debug">
            <xsl:attribute name="debug">
                <xsl:value-of select="'$(wsDebugFlag)'"/>
            </xsl:attribute>
        </xsl:template>

h2 Setting text values (inside nodes)
p.
    The PaymentSettings uses this style of XML:

pre
    code(class="xml").
        <PaymentSettings>
            <PaymentSystem>Tom</PaymentSystem>
            <URL>Dick</URL>
            <Timeout>Harry</Timeout>
        </PaymentSettings>

p.
    To replace Tom, Dick and Harry with the correct values you need to use
    the text() selector:

pre
    code(class="xml").
        <xsl:template match="/configuration/PaymentSettings/PaymentSystem/text()|/PaymentSettings/PaymentSystem/text()">
            <xsl:text>$(payPaymentSystem)</xsl:text>
        </xsl:template>
        etc.

p.
    This will match "Tom" and replace it with whatever the value of $(payPaymentSystem) is.

h2 Dealing with special characters (quoting)
p.
    In any type of text-replacement work you will eventually come across the need to escape, or quote,
    your strings. ConfigZilla is no different, but there is a gotcha - there are <em>two</em>
    technologies in use, MSBuild and Xslt, and they use different quoting techniques. To quote in
    MSBuild you need to use hexadecimal ASCII character codes, while to quote in Xslt the easiest way is to
    use CDATA blocks. Here is an example using Entity Framework. Let's say your .xslt
    file has an EF connection string with the form:

pre
    code(class="xml").
        <add name="BlogContext"
            connectionString="metadata=res://*/BloggingModel.csdl|
                             res://*/BloggingModel.ssdl|
                             res://*/BloggingModel.msl;
                             provider=System.Data.SqlClient
                             provider connection string=
                             &&zwnj;quot;data source=(localdb)\v11.0;
                             initial catalog=Blogging;
                             integrated security=True;
                             multipleactiveresultsets=True;&&zwnj;quot;"
             providerName="System.Data.EntityClient" />

p.
    Note the two embedded <em>&#38;quot;</em>s. They will get translated into the " character by
    MSBuild, breaking your template. The solution is to replace the 6 characters
    in <em>&#38;quot;</em> with their <a href="http://ascii.cl/">ASCII codes</a>, which are
    "%26%71%75%6F%74%3B", hence this will work:

pre
    code(class="xml").
        <add name="BlogContext"
            connectionString="metadata=res://*/BloggingModel.csdl|
                             res://*/BloggingModel.ssdl|
                             res://*/BloggingModel.msl;
                             provider=System.Data.SqlClient
                             provider connection string=
                             %26%71%75%6F%74%3B;data source=(localdb)\v11.0;
                             initial catalog=Blogging;
                             integrated security=True;
                             multipleactiveresultsets=True;%26%71%75%6F%74%3B"
             providerName="System.Data.EntityClient" />

p.
    In this particular case, you may also be able to use a single quote rather
    than a double quote.

p.
    Here is an example of quoting on the Xsl-side. If you try and include the
    following log4net Xml in a template:

pre
    code(class="xml").
        <layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" />

p.
    you will get error messages around the <em>yyyy</em> part, because Xsl uses "{" as a delimiter
    for <a href="http://www.w3.org/TR/xslt#attribute-value-templates">attribute value templates</a>.
    You can prevent this error by simply doubling up the braces

pre
    code(class="xml").
        <layout type="log4net.Layout.PatternLayout" value="%date{{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}}" />

p.
    An alternative and more powerful technique is to use CDATA blocks which can escape anything:

pre
    code(class="xml").
        <xsl:template match="...">
            <![CDATA[
            <layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" />
            ]]>
        </xsl:template>

h2 Varying template output for each project in a solution
p.
    ConfigZilla writes one Xslt file, ConfigZilla.xslt, when the ConfigZilla project is compiled.
    It then applies this to each project in your solution. This works well for the vast majority
    of cases but has one drawback: it is not easy to produce <i>per-project</i> template output.
    For example, if you have 5 exes in your solution and you want each one of them to produce
    a separate log file it is not obvious how to do it. You can't use MSBuild properties like
    $(MSBuildProjectName) because that will always be "ConfigZilla". Instead, ConfigZilla uses
    <a href="http://www.w3.org/TR/xslt#variables">Xsl Parameters</a> to make this possible.

p.
    When a project is compiled ConfigZilla automatically gathers the MSBuild properties
    <i>from that project</i>, prefixes them with "czp" and passes them into the Xsl template.
    So for example when compiling project "Foo", the variable $(MSBuildProjectName) will
    be "Foo" and will be available in the Xslt as the Xsl parameter "czpMSBuildProjectName".
    To use it in your template you need to declare the parameter and then use value-of:

pre
    code(class="xml").
        // outside a template:
        <xsl:param name="czpMSBuildProjectName" />

        // then:
        <xsl:template>
            ...
            <xsl:value-of select="$czpMSBuildProjectName" />
            ...
        </xsl:template>

p.
    You can disable this automatic parameter gathering by setting the MSBuild property
    "AutoIncludeXslParameters" to false in your ConfigZilla.user file.


h2 Further reading
ul
    li.
        The XsltSnippets.txt file provided in the ConfigZilla project contains more
        template examples.
    li.
        Evan Lenz's article <a href="http://lenzconsulting.com/how-xslt-works/">How XSLT Works</a>
        goes into much more detail than I have here and is highly recommended.
    li.
        The <a href="http://msdn.microsoft.com/en-us/library/ms256086(v=vs.110).aspx">Microsoft
        documentation on XPath</a> contains lots of example expressions.
    li.
        If you want to test your XSLT online, <a href="http://xslt.online-toolz.com/tools/xslt-transformation.php">OnlineToolz</a> is pretty good.


