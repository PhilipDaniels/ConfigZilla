---
layout: default
title: Upgrading to version 2
---

h2 Version 1 vs version 2
p.
  Version 2 is a significant upgrade in terms of ease-of-use and power compared to
  version 1. In brief, the difference is that

ul
  li.
    Version 1 only generated one merged ConfigZilla.xslt file when you compiled
    the ConfigZilla project. Because of this properties such as $(MSBuildProjectName)
    were always made in the context of the ConfigZilla project. This made it difficult
    to use per-project customisations: you had to rely on Xsl Parameters, the syntax
    for which is rather clunky, and they couldn't be referenced in .targets files.
  li.
    Version 2 generates a merged ConfigZilla.xslt file for each project in which you
    have installed ConfigZilla. Properties such as $(MSBuildProjectName) are always
    evaluated in the context of the project being compiled, <strong>NOT</strong>
    ConfigZilla. This makes it easy to compose per-project settings such as log file
    names. Furthermore, you can use them in .targets files, not just .xslt files.

h2 Considerations for upgrading
p.
  Upgrading via NuGet should be automatic. The upgrade script will delete two files
  from your ConfigZilla folder, "ConfigZillaCreateXslt.targets" and "ConfigZilla.Tasks.dll".
  Neither of these are needed anymore. References to them will also be removed
  from ConfigZilla.csproj, which may cause a warning about needing to reload the project file.

p.
  There are no changes to any of your .targets and .xslt files in your Transforms folder,
  except that the "czp" automatic Xsl Parameters are no longer gathered. If you were
  using these, please convert to using MSBuild properties instead.

p.
  You can now create a Transforms folder in each project being compiled; the contents
  of these will be included after the ConfigZilla\Transforms folder, thus giving
  the ability to override the values set in ConfigZilla\Transforms. Most users
  will not need this feature and will be able to keep all their transformations
  centralised in ConfigZilla\Transforms.

p.
  The XmlDeserializeConfigSectionHandler class now supports validation using
  System.ComponentModel.DataAnnotations attributes and the DefaultValue
  attribute. n.b. If upgrading from version 1.*, the copy of XmlDeserializeConfigSectionHandler
  in your ConfigZilla project will NOT be upgraded in case you have made your own
  customisations to it. To workaround this, create a ConsoleApp, install ConfigZilla
  into it, and then just copy-and-paste the class into your existing project.

